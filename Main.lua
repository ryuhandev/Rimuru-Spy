--[[
   LUA SPYER ENCHANTED BY RYUHAN
]]


local a,b={UseWorkspace=false,NoActors=false,FolderName='Rimuru Spy',RepoUrl=
[[https://raw.githubusercontent.com/ryuhandev/Rimuru-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main/dist/Main.luau]]
},{...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end
local d=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end if not g then
return end local h=readfile(g)if#h<=0 then return end local i,j=pcall(
getcustomasset,g)if not i then return end if not j or#j<=0 then return end
return j end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)local j=readfile(i)local k=loadstring(j)if k then return
j end return self:GetTemplate(h)end return self:GetFile(i)end function e:
LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'and
j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l,m=loadstring(j,
i)assert(l,`Failed to load {i}: {m}`)h[i]=l(...)end return h end function e:
LoadModules(g,h)for i,j in next,g do local k=j.Init if not k then continue end j
:Init(h)end end function e:CreateFont(g,h)if not h then return end local i=`assets/{
g}.json`local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,
style='Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end
function e:CompileModule(g)local h='local Libraries = {'for i,j in g do if
typeof(j)~='string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`
end h..='}'return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g
)i..='\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f=e.
FolderName local g,h={Config=e:GetModule(`{f}/Config`,'Config'),ReturnSpoofs=e:
GetModule(`{f}/Return spoofs`,'Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgLS0gUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAtLSAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgLS0gICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgLS0gfSwNCiAgICAgICAgLS0gUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgLS0gICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgIC0tICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICAtLSB9LA0KICAgICAgICBOb0NvbW1lbnRzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGNvbW1lbnRzIiwNCiAgICAgICAgfSwNCiAgICAgICAgU2VsZWN0TmV3ZXN0ID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIkF1dG8gc2VsZWN0IG5ld2VzdCIsDQogICAgICAgIH0sDQogICAgICAgIERlY29tcGlsZVBvcG91dCA9IHsgLS0gTG92cmUgU0hVU0gNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJQb3Atb3V0IGRlY29tcGlsZXMiLA0KICAgICAgICB9LA0KICAgICAgICBJZ25vcmVOaWwgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJJZ25vcmUgbmlsIHBhcmVudHMiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dFeHBsb2l0ID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTG9nIGV4cGxvaXQgY2FsbHMiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dSZWNpdmVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTG9nIHJlY2VpdmVzIiwNCiAgICAgICAgfSwNCiAgICAgICAgUGF1c2VkID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIlBhdXNlZCIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlENCiAgICAgICAgfSwNCiAgICAgICAgS2V5YmluZHNFbmFibGVkID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiS2V5YmluZHMgRW5hYmxlZCINCiAgICAgICAgfSwNCiAgICAgICAgRmluZFN0cmluZ0Zvck5hbWUgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJGaW5kIGFyZyBmb3IgbmFtZSINCiAgICAgICAgfSwNCiAgICAgICAgVWlWaXNpYmxlID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiVUkgVmlzaWJsZSIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlANCiAgICAgICAgfSwNCiAgICAgICAgTm9UcmVlTm9kZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTm8gZ3JvdXBpbmciDQogICAgICAgIH0sDQogICAgICAgIFRhYmxlQXJncyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJUYWJsZSBhcmdzIg0KICAgICAgICB9LA0KICAgICAgICBOb1ZhcmlhYmxlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBjb21wcmVzc2lvbiINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdWYWx1ZShOYW1lOiBzdHJpbmcpOiBGbGFnVmFsdWUNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgcmV0dXJuIEZsYWcuVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZywgVmFsdWU6IEZsYWdWYWx1ZSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5WYWx1ZSA9IFZhbHVlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFjayhOYW1lOiBzdHJpbmcsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkpDQogICAgbG9jYWwgRmxhZyA9IHNlbGY6R2V0RmxhZyhOYW1lKQ0KICAgIEZsYWcuQ2FsbGJhY2sgPSBDYWxsYmFjaw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnQ2FsbGJhY2tzKERpY3Q6IHt9KQ0KICAgIGZvciBOYW1lLCBDYWxsYmFjazogKC4uLmFueSkgLT4gLi4uYW55IGluIG5leHQsIERpY3QgZG8gDQogICAgICAgIHNlbGY6U2V0RmxhZ0NhbGxiYWNrKE5hbWUsIENhbGxiYWNrKQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFnKE5hbWU6IHN0cmluZyk6IEZsYWcNCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQ0KICAgIGxvY2FsIEZsYWcgPSBBbGxGbGFnc1tOYW1lXQ0KICAgIGFzc2VydChGbGFnLCAiRmxhZyBkb2VzIG5vdCBleGlzdCEiKQ0KICAgIHJldHVybiBGbGFnDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkFkZEZsYWcoTmFtZTogc3RyaW5nLCBGbGFnOiBGbGFnKQ0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgQWxsRmxhZ3NbTmFtZV0gPSBGbGFnDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdzKCk6IEZsYWdzDQogICAgcmV0dXJuIHNlbGYuRmxhZ3MNCmVuZA0KDQpyZXR1cm4gTW9kdWxl]]
},Ui={'base64',
[[]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[dHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCi0tLy8gTW9kdWxlDQpsb2NhbCBNb2R1bGUgPSB7DQogICAgQ29tbUNhbGxiYWNrcyA9IHt9DQp9DQoNCmxvY2FsIENvbW1XcmFwcGVyID0ge30NCkNvbW1XcmFwcGVyLl9faW5kZXggPSBDb21tV3JhcHBlcg0KDQotLS8vIFNlcmlhbGl6ZXIgY2FjaGUNCmxvY2FsIFNlcmlhbGl6ZUNhY2hlID0gc2V0bWV0YXRhYmxlKHt9LCB7X19tb2RlID0gImsifSkNCmxvY2FsIERlc2VyaWFsaXplQ2FjaGUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAiayJ9KQ0KDQotLS8vIFNlcnZpY2VzDQpsb2NhbCBDb3JlR3VpDQoNCi0tLy8gTW9kdWxlcw0KbG9jYWwgSG9vaw0KbG9jYWwgQ2hhbm5lbA0KbG9jYWwgQ29uZmlnDQpsb2NhbCBQcm9jZXNzDQoNCmZ1bmN0aW9uIE1vZHVsZTpJbml0KERhdGEpDQogICAgbG9jYWwgTW9kdWxlcyA9IERhdGEuTW9kdWxlcw0KICAgIGxvY2FsIFNlcnZpY2VzID0gRGF0YS5TZXJ2aWNlcw0KDQogICAgSG9vayA9IE1vZHVsZXMuSG9vaw0KICAgIFByb2Nlc3MgPSBNb2R1bGVzLlByb2Nlc3MNCiAgICBDb25maWcgPSBNb2R1bGVzLkNvbmZpZyBvciBDb25maWcNCiAgICBDb3JlR3VpID0gU2VydmljZXMuQ29yZUd1aQ0KZW5kDQoNCmZ1bmN0aW9uIENvbW1XcmFwcGVyOkZpcmUoLi4uKQ0KICAgIGxvY2FsIFF1ZXVlID0gc2VsZi5RdWV1ZQ0KICAgIHRhYmxlLmluc2VydChRdWV1ZSwgey4uLn0pDQplbmQNCg0KZnVuY3Rpb24gQ29tbVdyYXBwZXI6UHJvY2Vzc0FyZ3VtZW50cyhBcmd1bWVudHMpIA0KICAgIGxvY2FsIENoYW5uZWwgPSBzZWxmLkNoYW5uZWwNCiAgICBDaGFubmVsOkZpcmUoUHJvY2VzczpVbnBhY2soQXJndW1lbnRzKSkNCmVuZA0KDQpmdW5jdGlvbiBDb21tV3JhcHBlcjpQcm9jZXNzUXVldWUoKQ0KICAgIGxvY2FsIFF1ZXVlID0gc2VsZi5RdWV1ZQ0KDQogICAgZm9yIEluZGV4ID0gMSwgI1F1ZXVlIGRvDQogICAgICAgIGxvY2FsIEFyZ3VtZW50cyA9IHRhYmxlLnJlbW92ZShRdWV1ZSkNCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQ0KICAgICAgICAgICAgc2VsZjpQcm9jZXNzQXJndW1lbnRzKEFyZ3VtZW50cykgDQogICAgICAgIGVuZCkNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBDb21tV3JhcHBlcjpCZWdpblF1ZXVlU2VydmljZSgpDQogICAgY29yb3V0aW5lLndyYXAoZnVuY3Rpb24oKQ0KICAgICAgICB3aGlsZSB3YWl0KCkgZG8NCiAgICAgICAgICAgIHNlbGY6UHJvY2Vzc1F1ZXVlKCkNCiAgICAgICAgZW5kDQogICAgZW5kKSgpDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOk5ld0NvbW1XcmFwKENoYW5uZWw6IEJpbmRhYmxlRXZlbnQpDQogICAgbG9jYWwgQmFzZSA9IHsNCiAgICAgICAgUXVldWUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAidiJ9KSwNCiAgICAgICAgQ2hhbm5lbCA9IENoYW5uZWwsDQogICAgICAgIEV2ZW50ID0gQ2hhbm5lbC5FdmVudA0KICAgIH0NCg0KICAgIC0tLy8gQ3JlYXRlIG5ldyB3cmFwcGVyIGNsYXNzDQogICAgbG9jYWwgV3JhcHBlZCA9IHNldG1ldGF0YWJsZShCYXNlLCBDb21tV3JhcHBlcikNCiAgICBXcmFwcGVkOkJlZ2luUXVldWVTZXJ2aWNlKCkNCg0KICAgIHJldHVybiBXcmFwcGVkDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOk1ha2VEZWJ1Z0lkSGFuZGxlcigpOiBCaW5kYWJsZUZ1bmN0aW9uDQogICAgLS0vLyBVc2luZyBCaW5kYWJsZUZ1bmN0aW9uIGFzIGl0IGRvZXMgbm90IHJlcXVpcmUgYSB0aHJlYWQgcGVybWlzc2lvbiBjaGFuZ2UNCiAgICBsb2NhbCBSZW1vdGUgPSBJbnN0YW5jZS5uZXcoIkJpbmRhYmxlRnVuY3Rpb24iKQ0KICAgIGZ1bmN0aW9uIFJlbW90ZS5Pbkludm9rZShPYmplY3Q6IEluc3RhbmNlKTogc3RyaW5nDQogICAgICAgIHJldHVybiBPYmplY3Q6R2V0RGVidWdJZCgpDQogICAgZW5kDQoNCiAgICBzZWxmLkRlYnVnSWRSZW1vdGUgPSBSZW1vdGUNCiAgICBzZWxmLkRlYnVnSWRJbnZva2UgPSBSZW1vdGUuSW52b2tlDQoNCiAgICByZXR1cm4gUmVtb3RlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldERlYnVnSWQoT2JqZWN0OiBJbnN0YW5jZSk6IHN0cmluZw0KICAgIGxvY2FsIEludm9rZSA9IHNlbGYuRGVidWdJZEludm9rZQ0KICAgIGxvY2FsIFJlbW90ZSA9IHNlbGYuRGVidWdJZFJlbW90ZQ0KCXJldHVybiBJbnZva2UoUmVtb3RlLCBPYmplY3QpDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEhpZGRlblBhcmVudCgpOiBJbnN0YW5jZQ0KICAgIC0tLy8gVXNlIGdldGh1aSBpZiBpdCBleGlzdHMNCiAgICBpZiBnZXRodWkgdGhlbiByZXR1cm4gZ2V0aHVpKCkgZW5kDQogICAgcmV0dXJuIENvcmVHdWkNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6Q3JlYXRlQ29tbUNoYW5uZWwoKTogKG51bWJlciwgQmluZGFibGVFdmVudCkNCiAgICAtLS8vIFVzZSBuYXRpdmUgaWYgaXQgZXhpc3RzDQogICAgbG9jYWwgRm9yY2UgPSBDb25maWcuRm9yY2VVc2VDdXN0b21Db21tDQogICAgaWYgY3JlYXRlX2NvbW1fY2hhbm5lbCBhbmQgbm90IEZvcmNlIHRoZW4NCiAgICAgICAgcmV0dXJuIGNyZWF0ZV9jb21tX2NoYW5uZWwoKQ0KICAgIGVuZA0KDQogICAgbG9jYWwgUGFyZW50ID0gc2VsZjpHZXRIaWRkZW5QYXJlbnQoKQ0KICAgIGxvY2FsIENoYW5uZWxJZCA9IG1hdGgucmFuZG9tKDEsIDEwMDAwMDAwKQ0KDQogICAgLS0vLyBCaW5kYWJsZUV2ZW50DQogICAgbG9jYWwgQ2hhbm5lbCA9IEluc3RhbmNlLm5ldygiQmluZGFibGVFdmVudCIsIFBhcmVudCkNCiAgICBDaGFubmVsLk5hbWUgPSBDaGFubmVsSWQNCg0KICAgIHJldHVybiBDaGFubmVsSWQsIENoYW5uZWwNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0Q29tbUNoYW5uZWwoQ2hhbm5lbElkOiBudW1iZXIpOiBCaW5kYWJsZUV2ZW50Pw0KICAgIC0tLy8gVXNlIG5hdGl2ZSBpZiBpdCBleGlzdHMNCiAgICBsb2NhbCBGb3JjZSA9IENvbmZpZy5Gb3JjZVVzZUN1c3RvbUNvbW0NCiAgICBpZiBnZXRfY29tbV9jaGFubmVsIGFuZCBub3QgRm9yY2UgdGhlbg0KICAgICAgICBsb2NhbCBDaGFubmVsID0gZ2V0X2NvbW1fY2hhbm5lbChDaGFubmVsSWQpDQogICAgICAgIHJldHVybiBDaGFubmVsLCBmYWxzZQ0KICAgIGVuZA0KDQogICAgbG9jYWwgUGFyZW50ID0gc2VsZjpHZXRIaWRkZW5QYXJlbnQoKQ0KICAgIGxvY2FsIENoYW5uZWwgPSBQYXJlbnQ6RmluZEZpcnN0Q2hpbGQoQ2hhbm5lbElkKQ0KDQogICAgLS0vLyBXcmFwIHRoZSBjaGFubmVsIChQcmV2ZW50cyB0aHJlYWQgcGVybWlzc2lvbiBlcnJvcnMpDQogICAgbG9jYWwgV3JhcHBlZCA9IHNlbGY6TmV3Q29tbVdyYXAoQ2hhbm5lbCkNCiAgICByZXR1cm4gV3JhcHBlZCwgdHJ1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpDaGVja1ZhbHVlKFZhbHVlLCBJbmJvdW5kOiBib29sZWFuPykNCiAgICAgLS0vLyBObyBzZXJpYWxpemluZyAgbmVlZGVkDQogICAgaWYgdHlwZW9mKFZhbHVlKSB+PSAidGFibGUiIHRoZW4gDQogICAgICAgIHJldHVybiBWYWx1ZSANCiAgICBlbmQNCiAgIA0KICAgIC0tLy8gRGVzZXJpYWxpemUNCiAgICBpZiBJbmJvdW5kIHRoZW4NCiAgICAgICAgcmV0dXJuIHNlbGY6RGVzZXJpYWxpemVUYWJsZShWYWx1ZSkNCiAgICBlbmQNCg0KICAgIC0tLy8gU2VyaWFsaXplDQogICAgcmV0dXJuIHNlbGY6U2VyaWFsaXplVGFibGUoVmFsdWUpDQplbmQNCg0KbG9jYWwgVGljayA9IDANCmZ1bmN0aW9uIE1vZHVsZTpXYWl0Q2hlY2soKQ0KICAgIFRpY2sgKz0gMQ0KICAgIGlmIFRpY2sgPiA0MCB0aGVuDQogICAgICAgIFRpY2sgPSAwIC0tIEkgY291bGQgdXNlIG1vZHVsdXMgaGVyZSBidXQgdGhlIGludGVyZ2VyIHdpbGwgYmUgbWFzc2l2ZQ0KICAgICAgICB3YWl0KCkNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6TWFrZVBhY2tldChJbmRleCwgVmFsdWUpOiB0YWJsZQ0KICAgIHNlbGY6V2FpdENoZWNrKCkNCiAgICByZXR1cm4gew0KICAgICAgICBJbmRleCA9IHNlbGY6Q2hlY2tWYWx1ZShJbmRleCksIA0KICAgICAgICBWYWx1ZSA9IHNlbGY6Q2hlY2tWYWx1ZShWYWx1ZSkNCiAgICB9DQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlJlYWRQYWNrZXQoUGFja2V0OiB0YWJsZSk6IChhbnksIGFueSkNCiAgICBpZiB0eXBlb2YoUGFja2V0KSB+PSAidGFibGUiIHRoZW4gcmV0dXJuIFBhY2tldCBlbmQNCiAgICANCiAgICBsb2NhbCBLZXkgPSBzZWxmOkNoZWNrVmFsdWUoUGFja2V0LkluZGV4LCB0cnVlKQ0KICAgIGxvY2FsIFZhbHVlID0gc2VsZjpDaGVja1ZhbHVlKFBhY2tldC5WYWx1ZSwgdHJ1ZSkNCiAgICBzZWxmOldhaXRDaGVjaygpDQoNCiAgICByZXR1cm4gS2V5LCBWYWx1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXJpYWxpemVUYWJsZShUYWJsZTogdGFibGUpOiB0YWJsZQ0KICAgIC0tLy8gQ2hlY2sgY2FjaGUgZm9yIGV4aXN0aW5nDQogICAgbG9jYWwgQ2FjaGVkID0gU2VyaWFsaXplQ2FjaGVbVGFibGVdDQogICAgaWYgQ2FjaGVkIHRoZW4gcmV0dXJuIENhY2hlZCBlbmQNCg0KICAgIGxvY2FsIFNlcmlhbGl6ZWQgPSB7fQ0KICAgIFNlcmlhbGl6ZUNhY2hlW1RhYmxlXSA9IFNlcmlhbGl6ZWQNCg0KICAgIGZvciBJbmRleCwgVmFsdWUgaW4gbmV4dCwgVGFibGUgZG8NCiAgICAgICAgbG9jYWwgUGFja2V0ID0gc2VsZjpNYWtlUGFja2V0KEluZGV4LCBWYWx1ZSkNCiAgICAgICAgdGFibGUuaW5zZXJ0KFNlcmlhbGl6ZWQsIFBhY2tldCkNCiAgICBlbmQNCg0KICAgIHJldHVybiBTZXJpYWxpemVkDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkRlc2VyaWFsaXplVGFibGUoU2VyaWFsaXplZDogdGFibGUpOiB0YWJsZQ0KICAgIC0tLy8gQ2hlY2sgZm9yIGNhY2hlZA0KICAgIGxvY2FsIENhY2hlZCA9IERlc2VyaWFsaXplQ2FjaGVbU2VyaWFsaXplZF0NCiAgICBpZiBDYWNoZWQgdGhlbiByZXR1cm4gQ2FjaGVkIGVuZA0KDQogICAgbG9jYWwgVGFibGUgPSB7fQ0KICAgIERlc2VyaWFsaXplQ2FjaGVbU2VyaWFsaXplZF0gPSBUYWJsZQ0KICAgIA0KICAgIGZvciBfLCBQYWNrZXQgaW4gbmV4dCwgU2VyaWFsaXplZCBkbw0KICAgICAgICBsb2NhbCBJbmRleCwgVmFsdWUgPSBzZWxmOlJlYWRQYWNrZXQoUGFja2V0KQ0KICAgICAgICBpZiBJbmRleCA9PSBuaWwgdGhlbiBjb250aW51ZSBlbmQNCg0KICAgICAgICBUYWJsZVtJbmRleF0gPSBWYWx1ZQ0KICAgIGVuZA0KDQogICAgcmV0dXJuIFRhYmxlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldENoYW5uZWwoTmV3Q2hhbm5lbDogbnVtYmVyKQ0KICAgIENoYW5uZWwgPSBOZXdDaGFubmVsDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkNvbnNvbGVQcmludCguLi4pDQogICAgc2VsZjpDb21tdW5pY2F0ZSgiUHJpbnQiLCAuLi4pDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlF1ZXVlTG9nKERhdGEpDQogICAgc3Bhd24oZnVuY3Rpb24oKQ0KICAgICAgICBsb2NhbCBTZXJpYWxpemVkQXJncyA9IHNlbGY6U2VyaWFsaXplVGFibGUoRGF0YS5BcmdzKQ0KICAgICAgICBEYXRhLkFyZ3MgPSBTZXJpYWxpemVkQXJncw0KDQogICAgICAgIHNlbGY6Q29tbXVuaWNhdGUoIlF1ZXVlTG9nIiwgRGF0YSkNCiAgICBlbmQpDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkFkZENvbW1DYWxsYmFjayhUeXBlOiBzdHJpbmcsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkpDQogICAgbG9jYWwgQ29tbUNhbGxiYWNrcyA9IHNlbGYuQ29tbUNhbGxiYWNrcw0KICAgIENvbW1DYWxsYmFja3NbVHlwZV0gPSBDYWxsYmFjaw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRDb21tQ2FsbGJhY2soVHlwZTogc3RyaW5nKTogKC4uLmFueSkgLT4gLi4uYW55DQogICAgbG9jYWwgQ29tbUNhbGxiYWNrcyA9IHNlbGYuQ29tbUNhbGxiYWNrcw0KICAgIHJldHVybiBDb21tQ2FsbGJhY2tzW1R5cGVdDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkNoYW5uZWxJbmRleChDaGFubmVsLCBQcm9wZXJ0eTogc3RyaW5nKQ0KICAgIGlmIHR5cGVvZihDaGFubmVsKSA9PSAiSW5zdGFuY2UiIHRoZW4NCiAgICAgICAgcmV0dXJuIEhvb2s6SW5kZXgoQ2hhbm5lbCwgUHJvcGVydHkpDQogICAgZW5kDQoNCiAgICAtLS8vIFNvbWUgZXhlY3V0b3JzIHJldHVybiBhIFVzZXJEYXRhIHR5cGUNCiAgICByZXR1cm4gQ2hhbm5lbFtQcm9wZXJ0eV0NCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6Q29tbXVuaWNhdGUoLi4uKQ0KICAgIGxvY2FsIEZpcmUgPSBzZWxmOkNoYW5uZWxJbmRleChDaGFubmVsLCAiRmlyZSIpDQogICAgRmlyZShDaGFubmVsLCAuLi4pDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkFkZENvbm5lY3Rpb24oQ2FsbGJhY2spOiBSQlhTY3JpcHRDb25uZWN0aW9uDQogICAgbG9jYWwgRXZlbnQgPSBzZWxmOkNoYW5uZWxJbmRleChDaGFubmVsLCAiRXZlbnQiKQ0KICAgIHJldHVybiBFdmVudDpDb25uZWN0KENhbGxiYWNrKQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpBZGRUeXBlQ2FsbGJhY2soVHlwZTogc3RyaW5nLCBDYWxsYmFjayk6IFJCWFNjcmlwdENvbm5lY3Rpb24NCiAgICBsb2NhbCBFdmVudCA9IHNlbGY6Q2hhbm5lbEluZGV4KENoYW5uZWwsICJFdmVudCIpDQogICAgcmV0dXJuIEV2ZW50OkNvbm5lY3QoZnVuY3Rpb24oUmVjaXZlZFR5cGU6IHN0cmluZywgLi4uKQ0KICAgICAgICBpZiBSZWNpdmVkVHlwZSB+PSBUeXBlIHRoZW4gcmV0dXJuIGVuZA0KICAgICAgICBDYWxsYmFjayguLi4pDQogICAgZW5kKQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpBZGRUeXBlQ2FsbGJhY2tzKFR5cGVzOiB0YWJsZSkNCiAgICBmb3IgVHlwZTogc3RyaW5nLCBDYWxsYmFjayBpbiBuZXh0LCBUeXBlcyBkbw0KICAgICAgICBzZWxmOkFkZFR5cGVDYWxsYmFjayhUeXBlLCBDYWxsYmFjaykNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6Q3JlYXRlQ2hhbm5lbCgpOiBudW1iZXINCiAgICBsb2NhbCBDaGFubmVsSUQsIEV2ZW50ID0gc2VsZjpDcmVhdGVDb21tQ2hhbm5lbCgpDQoNCiAgICAtLS8vIENvbm5lY3QgR2V0Q29tbUNhbGxiYWNrIGZ1bmN0aW9uDQogICAgRXZlbnQuRXZlbnQ6Q29ubmVjdChmdW5jdGlvbihUeXBlOiBzdHJpbmcsIC4uLikNCiAgICAgICAgbG9jYWwgQ2FsbGJhY2sgPSBzZWxmOkdldENvbW1DYWxsYmFjayhUeXBlKQ0KICAgICAgICBpZiBDYWxsYmFjayB0aGVuDQogICAgICAgICAgICBDYWxsYmFjayguLi4pDQogICAgICAgIGVuZA0KICAgIGVuZCkNCg0KICAgIHJldHVybiBDaGFubmVsSUQsIEV2ZW50DQplbmQNCg0KTW9kdWxlOk1ha2VEZWJ1Z0lkSGFuZGxlcigpDQoNCnJldHVybiBNb2R1bGU=]]
}},d.Players local i=e:LoadLibraries(g)local j,k,l,m,n,o,p=i.Process,i.Hook,i.Ui
,i.Generation,i.Communication,i.Config,e:GetAsset('ProggyClean.ttf',true)local q
=e:CreateFont('ProggyClean',p)l:SetFontFile(q)j:CheckConfig(o)e:LoadModules(i,{
Modules=i,Services=d})local r,s=l:CreateMainWindow(),j:CheckIsSupported()if not
s then r:Close()return end local t,u=n:CreateChannel()n:AddCommCallback(
'QueueLog',function(...)l:QueueLog(...)end)n:AddCommCallback('Print',function(
...)l:ConsoleLog(...)end)local v=h.LocalPlayer m:SetSwapsCallback(function(w)w:
AddSwap(v,{String='LocalPlayer'})w:AddSwap(v.Character,{String='Character',
NextParent=v})end)l:CreateWindowContent(r)l:SetCommChannel(u)l:BeginLogService()
local w=e:MakeActorScript(g,t)k:LoadHooks(w,t)local x=l:AskUser{Title=
'Enable function patches?',Content={
[[On some executors, function patches can prevent common detections that executor has]]
,
[[By enabling this, it MAY trigger hook detections in some games, this is why you are asked.]]
,"If it doesn't work, rejoin and press 'No'",'',
'(This does not affect game functionality)'},Options={'Yes','No'}}=='Yes'u:Fire(
'BeginHooks',{PatchFunctions=x})

